-- 1. 사용자 프로필 테이블 생성
CREATE TABLE public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT UNIQUE,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. 게시물 테이블 생성
CREATE TABLE public.posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  user_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  content TEXT
);

-- 3. 댓글 테이블 생성
CREATE TABLE public.comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  user_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
  post_id BIGINT REFERENCES public.posts(id) ON DELETE CASCADE,
  content TEXT
);

-- 4. 게시물 이력 테이블 생성
CREATE TABLE public.post_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id BIGINT REFERENCES public.posts(id) ON DELETE CASCADE,
  edited_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  title TEXT,
  content TEXT
);

-- 5. 댓글 이력 테이블 생성
CREATE TABLE public.comment_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  comment_id BIGINT REFERENCES public.comments(id) ON DELETE CASCADE,
  edited_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  content TEXT
);

-- 6. 게시물 수정 시 자동으로 이력을 기록하는 함수 및 트리거 생성
CREATE OR REPLACE FUNCTION public.log_post_history()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.post_history (post_id, title, content)
  VALUES (OLD.id, OLD.title, OLD.content);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER post_update_trigger
BEFORE UPDATE ON public.posts
FOR EACH ROW
EXECUTE FUNCTION public.log_post_history();

-- 7. 댓글 수정 시 자동으로 이력을 기록하는 함수 및 트리거 생성
CREATE OR REPLACE FUNCTION public.log_comment_history()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.comment_history (comment_id, content)
  VALUES (OLD.id, OLD.content);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER comment_update_trigger
BEFORE UPDATE ON public.comments
FOR EACH ROW
EXECUTE FUNCTION public.log_comment_history();

-- 8. 기본적인 보안 규칙 (RLS) 설정
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.post_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comment_history ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.posts FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.comments FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.post_history FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.comment_history FOR SELECT USING (true);

CREATE POLICY "Allow individual insert access" ON public.users FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow individual update access" ON public.users FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Allow authenticated insert access" ON public.posts FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow authenticated insert access" ON public.comments FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow individual update access" ON public.posts FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON public.posts FOR DELETE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual update access" ON public.comments FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON public.comments FOR DELETE USING (auth.uid() = user_id);
